// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: dynamic_tables.sql

package sqlcrepo

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDynamicTable = `-- name: CreateDynamicTable :one
INSERT INTO dynamic_tables (
  id, table_name, created_at, created_by, modified_at, modified_by
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id
`

type CreateDynamicTableParams struct {
	ID         string
	TableName  string
	CreatedAt  pgtype.Timestamp
	CreatedBy  string
	ModifiedAt pgtype.Timestamp
	ModifiedBy string
}

func (q *Queries) CreateDynamicTable(ctx context.Context, arg CreateDynamicTableParams) (string, error) {
	row := q.db.QueryRow(ctx, createDynamicTable,
		arg.ID,
		arg.TableName,
		arg.CreatedAt,
		arg.CreatedBy,
		arg.ModifiedAt,
		arg.ModifiedBy,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const deleteDynamicTable = `-- name: DeleteDynamicTable :exec
DELETE FROM dynamic_tables
WHERE id = ANY($1::text[])
`

func (q *Queries) DeleteDynamicTable(ctx context.Context, dollar_1 []string) error {
	_, err := q.db.Exec(ctx, deleteDynamicTable, dollar_1)
	return err
}

const fetchDynamicTables = `-- name: FetchDynamicTables :many
SELECT id, table_name, created_at, modified_at, created_by, modified_by FROM dynamic_tables
WHERE id = ANY($1::text[])
ORDER BY id
`

func (q *Queries) FetchDynamicTables(ctx context.Context, dollar_1 []string) ([]DynamicTable, error) {
	rows, err := q.db.Query(ctx, fetchDynamicTables, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DynamicTable
	for rows.Next() {
		var i DynamicTable
		if err := rows.Scan(
			&i.ID,
			&i.TableName,
			&i.CreatedAt,
			&i.ModifiedAt,
			&i.CreatedBy,
			&i.ModifiedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
